basePath: /api/v1
definitions:
  datavalidator.ResError:
    properties:
      message:
        description: exclude = \"\\\/
        example: banned symbols in username
        type: string
    type: object
  datavalidator.ResMesOK:
    properties:
      message:
        description: exclude = \"\\\/
        example: '... successfully ...'
        type: string
    type: object
  db.BookingsData:
    properties:
      count:
        type: integer
      rows:
        items:
          $ref: '#/definitions/model.Booking'
        type: array
    type: object
  model.Booking:
    properties:
      comment:
        description: |-
          min_length = 5
          min_length = 120
          exclude = \"\\\/
        example: I may be a little late
        type: string
      end_time:
        description: YYYY-MM-DD HH:MM:SS
        example: "2023-10-01T14:30:00Z"
        type: string
      id:
        example: 1021
        type: integer
      start_time:
        description: YYYY-MM-DD HH:MM:SS
        example: "2023-10-01T12:00:00Z"
        type: string
      user_id:
        example: 906
        type: integer
    type: object
  model.User:
    properties:
      created_at:
        description: YYYY-MM-DD HH:MM:SS
        example: "2023-09-24T17:13:42Z"
        type: string
      id:
        example: 906
        type: integer
      password:
        description: |-
          min_length = 6
          min_length = 20
          exclude = \"\\\/
        example: $2a$14$kv/sGmTWIlNYocbZqd88GuRsrOtKrs9bBFMM7N7HRNZ.qPxF.b.GG
        type: string
      updated_at:
        description: YYYY-MM-DD HH:MM:SS
        example: "2023-09-27T11:10:23Z"
        type: string
      username:
        description: |-
          min_length = 3
          min_length = 20
          exclude = \"\\\/
        example: Andrew
        type: string
    type: object
info:
  contact: {}
  description: 'This rest api is designed to work with the PostgreSQL database. There
    are two main entities: User and Booking. One user can have multiple Bookings'
  title: CyberZoneDev test REST API project
paths:
  /booking:
    get:
      description: (optional) set limit or limit with page or limit with offset
      parameters:
      - description: limit
        in: query
        name: limit
        type: integer
      - description: page
        in: query
        name: page
        type: integer
      - description: offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.BookingsData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/datavalidator.ResError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/datavalidator.ResError'
      summary: Return all bookings
      tags:
      - booking
    post:
      description: Prepairing booking data for new booking (linked to user) in db
      parameters:
      - description: user_id (user is exists)
        in: formData
        name: user_id
        required: true
        type: integer
      - description: start_time (YYYY-MM-DD HH:MM:SS)
        in: formData
        name: start_time
        required: true
        type: string
      - description: end_time (YYYY-MM-DD HH:MM:SS)
        in: formData
        name: end_time
        required: true
        type: string
      - description: comment (5 <= length <= 120, exclude=\
        in: formData
        name: comment
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Booking'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/datavalidator.ResError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/datavalidator.ResError'
      summary: Add new booking data in db
      tags:
      - booking
  /booking/{id}:
    delete:
      parameters:
      - description: id to find booking
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/datavalidator.ResMesOK'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/datavalidator.ResError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/datavalidator.ResError'
      summary: Delete booking data by id
      tags:
      - booking
    get:
      description: If booking isn't found, it returns blank json
      parameters:
      - description: id to find booking
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Booking'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/datavalidator.ResError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/datavalidator.ResError'
      summary: Return booking data (json) by id
      tags:
      - booking
    put:
      description: (option) update start_time, end_time, comment
      parameters:
      - description: booking id
        in: path
        name: id
        required: true
        type: integer
      - description: start_time (YYYY-MM-DD HH:MM:SS)
        in: formData
        name: start_time
        type: string
      - description: end_time (YYYY-MM-DD HH:MM:SS)
        in: formData
        name: end_time
        type: string
      - description: comment (5 <= length <= 120, exclude=\
        in: formData
        name: comment
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Booking'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/datavalidator.ResError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/datavalidator.ResError'
      summary: Update booking data by id
      tags:
      - booking
  /user:
    post:
      description: Prepairing user data for new user in db
      parameters:
      - description: username (3 <= length <= 20, exclude=\
        in: formData
        name: username
        required: true
        type: string
      - description: password (6 <= length <= 20, exclude=\
        in: formData
        name: password
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/datavalidator.ResError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/datavalidator.ResError'
      summary: Add new user data in db
      tags:
      - user
  /user/{id}:
    delete:
      description: Delete user and bookings (if exists)
      parameters:
      - description: id to find user
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/datavalidator.ResMesOK'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/datavalidator.ResError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/datavalidator.ResError'
      summary: Delete user data (user and bookings) by id
      tags:
      - user
    get:
      description: If user isn't found, it returns blank json
      parameters:
      - description: id to find user
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/datavalidator.ResError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/datavalidator.ResError'
      summary: Return user data (json) by id
      tags:
      - user
    put:
      description: (option) update username(to unique), password
      parameters:
      - description: user id
        in: path
        name: id
        required: true
        type: integer
      - description: username (3 <= length <= 20, exclude=\
        in: formData
        name: username
        type: string
      - description: password (6 <= length <= 20, exclude=\
        in: formData
        name: password
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/datavalidator.ResError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/datavalidator.ResError'
      summary: Update user data by id
      tags:
      - user
swagger: "2.0"
