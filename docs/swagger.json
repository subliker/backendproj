{
    "swagger": "2.0",
    "info": {
        "description": "This rest api is designed to work with the PostgreSQL database. There are two main entities: User and Booking. One user can have multiple Bookings",
        "title": "CyberZoneDev test REST API project",
        "contact": {}
    },
    "basePath": "/api/v1",
    "paths": {
        "/booking": {
            "get": {
                "description": "(optional) set limit or limit with page or limit with offset",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "booking"
                ],
                "summary": "Return all bookings",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "offset",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/db.BookingsData"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/datavalidator.ResError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/datavalidator.ResError"
                        }
                    }
                }
            },
            "post": {
                "description": "Prepairing booking data for new booking (linked to user) in db",
                "tags": [
                    "booking"
                ],
                "summary": "Add new booking data in db",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "user_id (user is exists)",
                        "name": "user_id",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "start_time (YYYY-MM-DD HH:MM:SS)",
                        "name": "start_time",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "end_time (YYYY-MM-DD HH:MM:SS)",
                        "name": "end_time",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "comment (5 \u003c= length \u003c= 120, exclude=\\",
                        "name": "comment",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Booking"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/datavalidator.ResError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/datavalidator.ResError"
                        }
                    }
                }
            }
        },
        "/booking/{id}": {
            "get": {
                "description": "If booking isn't found, it returns blank json",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "booking"
                ],
                "summary": "Return booking data (json) by id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id to find booking",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Booking"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/datavalidator.ResError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/datavalidator.ResError"
                        }
                    }
                }
            },
            "put": {
                "description": "(option) update start_time, end_time, comment",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "booking"
                ],
                "summary": "Update booking data by id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "booking id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "start_time (YYYY-MM-DD HH:MM:SS)",
                        "name": "start_time",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "end_time (YYYY-MM-DD HH:MM:SS)",
                        "name": "end_time",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "comment (5 \u003c= length \u003c= 120, exclude=\\",
                        "name": "comment",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Booking"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/datavalidator.ResError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/datavalidator.ResError"
                        }
                    }
                }
            },
            "delete": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "booking"
                ],
                "summary": "Delete booking data by id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id to find booking",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/datavalidator.ResMesOK"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/datavalidator.ResError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/datavalidator.ResError"
                        }
                    }
                }
            }
        },
        "/user": {
            "post": {
                "description": "Prepairing user data for new user in db",
                "tags": [
                    "user"
                ],
                "summary": "Add new user data in db",
                "parameters": [
                    {
                        "type": "string",
                        "description": "username (3 \u003c= length \u003c= 20, exclude=\\",
                        "name": "username",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "password (6 \u003c= length \u003c= 20, exclude=\\",
                        "name": "password",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/datavalidator.ResError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/datavalidator.ResError"
                        }
                    }
                }
            }
        },
        "/user/{id}": {
            "get": {
                "description": "If user isn't found, it returns blank json",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Return user data (json) by id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id to find user",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/datavalidator.ResError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/datavalidator.ResError"
                        }
                    }
                }
            },
            "put": {
                "description": "(option) update username(to unique), password",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Update user data by id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "user id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "username (3 \u003c= length \u003c= 20, exclude=\\",
                        "name": "username",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "password (6 \u003c= length \u003c= 20, exclude=\\",
                        "name": "password",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/datavalidator.ResError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/datavalidator.ResError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete user and bookings (if exists)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Delete user data (user and bookings) by id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id to find user",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/datavalidator.ResMesOK"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/datavalidator.ResError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/datavalidator.ResError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "datavalidator.ResError": {
            "type": "object",
            "properties": {
                "message": {
                    "description": "exclude = \\\"\\\\\\/",
                    "type": "string",
                    "example": "banned symbols in username"
                }
            }
        },
        "datavalidator.ResMesOK": {
            "type": "object",
            "properties": {
                "message": {
                    "description": "exclude = \\\"\\\\\\/",
                    "type": "string",
                    "example": "... successfully ..."
                }
            }
        },
        "db.BookingsData": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "rows": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Booking"
                    }
                }
            }
        },
        "model.Booking": {
            "type": "object",
            "properties": {
                "comment": {
                    "description": "min_length = 5\nmin_length = 120\nexclude = \\\"\\\\\\/",
                    "type": "string",
                    "example": "I may be a little late"
                },
                "end_time": {
                    "description": "YYYY-MM-DD HH:MM:SS",
                    "type": "string",
                    "example": "2023-10-01T14:30:00Z"
                },
                "id": {
                    "type": "integer",
                    "example": 1021
                },
                "start_time": {
                    "description": "YYYY-MM-DD HH:MM:SS",
                    "type": "string",
                    "example": "2023-10-01T12:00:00Z"
                },
                "user_id": {
                    "type": "integer",
                    "example": 906
                }
            }
        },
        "model.User": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "YYYY-MM-DD HH:MM:SS",
                    "type": "string",
                    "example": "2023-09-24T17:13:42Z"
                },
                "id": {
                    "type": "integer",
                    "example": 906
                },
                "password": {
                    "description": "min_length = 6\nmin_length = 20\nexclude = \\\"\\\\\\/",
                    "type": "string",
                    "example": "$2a$14$kv/sGmTWIlNYocbZqd88GuRsrOtKrs9bBFMM7N7HRNZ.qPxF.b.GG"
                },
                "updated_at": {
                    "description": "YYYY-MM-DD HH:MM:SS",
                    "type": "string",
                    "example": "2023-09-27T11:10:23Z"
                },
                "username": {
                    "description": "min_length = 3\nmin_length = 20\nexclude = \\\"\\\\\\/",
                    "type": "string",
                    "example": "Andrew"
                }
            }
        }
    }
}